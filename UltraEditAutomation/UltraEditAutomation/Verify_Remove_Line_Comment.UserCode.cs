///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace UltraEditAutomation
{
    public partial class Verify_Remove_Line_Comment
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void VerifyRemoveCommentLine(RepoItemInfo editorInfo)
        {
            // Define the line number to check
            const int lineNumberToCheck = 1; // Change this to any line number you want to check
          

            var element59648 = repo.UltraEdit64Bit.editorScreen;

            try
            {
                // Attempt to locate the editor element
                var editor = Host.Local.FindSingle<Unknown>(repo.UltraEdit64Bit.editorScreen.GetPath());

                if (editor == null)
                {
                    Report.Error("Editor element not found. Check the XPath or if the element is visible at runtime.");
                    return;
                }

                // Attempt to retrieve text from "WindowText" or "AccessibleName"
                string editorText = editor.Element.GetAttributeValueText("WindowText");

                if (string.IsNullOrEmpty(editorText))
                {
                    editorText = editor.Element.GetAttributeValueText("AccessibleName");
                }

                if (string.IsNullOrEmpty(editorText))
                {
                    Report.Warn("Unable to retrieve text from the editor using 'WindowText' or 'AccessibleName'.");
                    return;
                }

                // Split the text into lines
                string[] lines = editorText.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);

                // Check if the specified line number is within the bounds of the text
                if (lines.Length >= lineNumberToCheck)
                {
                    string lineToCheck = lines[lineNumberToCheck - 1].Trim(); // Adjust index for 0-based array

                    // Check if the line is not commented
                    if (!lineToCheck.StartsWith("//"))
                    {
                        Report.Success($"Line {lineNumberToCheck} is not commented: '{lineToCheck}'");
                    }
                    else
                    {
                        Report.Error($"Line {lineNumberToCheck} is commented: '{lineToCheck}'");
                        throw new Exception($"Test case failed: Line {lineNumberToCheck} is commented.");
                    }
                }
                else
                {
                    Report.Warn($"The editor does not contain {lineNumberToCheck} lines.");
                    throw new Exception($"Test case failed: The editor does not contain {lineNumberToCheck} lines.");
                }
            }
            catch (RanorexException ex)
            {
                Report.Error("Ranorex-specific error: " + ex.Message);
                throw; // Propagate the exception to fail the test case
            }
            catch (Exception ex)
            {
                Report.Error("An unexpected error occurred: " + ex.Message);
                throw; // Propagate the exception to fail the test case
            }
        }
    }
}
