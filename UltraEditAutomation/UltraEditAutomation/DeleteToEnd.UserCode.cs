///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace UltraEditAutomation
{
    public partial class DeleteToEnd
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
		public int lineNumber;
        public void retriveTextofLine()
        {
             try
            {
                var editorScreen = repo.UltraEdit64Bit.editorScreen;

                if (editorScreen == null)
                {
                    Report.Error("Editor Screen element not found.");
                    return;
                }

                string fullText = editorScreen.Element.GetAttributeValueText("WindowText");

                lineNumber = 8; // Adjust the line number as needed
                var lines = fullText.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);

                if (lineNumber <= lines.Length && lineNumber > 0)
                {
                	string specificLine = lines[lineNumber - 1];

            		 Report.Info($"Line {lineNumber}: '{specificLine}'");
                  
                }
                else
                {
                    Report.Error($"Line {lineNumber} does not exist in the retrieved text.");
                }
            }
            catch (Exception ex)
            {
                Report.Error($"An error occurred while retrieving the specific line: {ex.Message}");
            }
        }

        public void VerifydeletedToEnd()
        {
             try
            {
                string expectedText = "           * Captures commonly n";  // Enter the expected text manually
                var editorScreen = repo.UltraEdit64Bit.editorScreen;

                if (editorScreen == null)
                {
                    Report.Error("Editor Screen element not found.");
                    return;
                }

                string fullText = editorScreen.Element.GetAttributeValueText("WindowText");

                var lines = fullText.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);

                if (lineNumber <= lines.Length && lineNumber > 0)
                {
                    string specificLine = lines[lineNumber - 1];

                    if (specificLine == expectedText)
                    {
                        Report.Success($"The text in line {lineNumber} matches the expected text.");
                        Report.Info($"The text of {lineNumber} is {specificLine}");
                    }
                    else
                    {
                        Report.Error($"The text in line {lineNumber} does not match the expected text.");
                        Validate.Fail("The is not matched");
                        Report.Info($"Expected: {expectedText}");
                        Report.Info($"Actual: {specificLine}");
                    }
                }
                else
                {
                    Report.Error($"Line {lineNumber} does not exist in the retrieved text.");
                }
            }
            catch (Exception ex)
            {
                Report.Error($"An error occurred while verifying the line: {ex.Message}");
            }
        }

    }
}
