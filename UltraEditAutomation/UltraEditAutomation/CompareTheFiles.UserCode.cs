///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace UltraEditAutomation
{
    public partial class CompareTheFiles
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Compare()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.0;
            
             var element1 = Host.Local.FindSingle<Ranorex.Unknown>(repo.UltraEdit64Bit.editorScreen.GetPath());
             var element2 = Host.Local.FindSingle<Ranorex.Unknown>(repo.UltraEdit64Bit.editorScreen1.GetPath());
                         
             string text1 = element1.Element.GetAttributeValueText("WindowText");
             string text2 = element2.Element.GetAttributeValueText("WindowText");
             
        if (text1 == text2)
        {
            Report.Success("Texts are identical.");
            
        }
        else
        {
            string unmatchedChars1 = GetUnmatchedCharacters(text1, text2);
            string unmatchedChars2 = GetUnmatchedCharacters(text2, text1);

            Report.Success("Texts are same, except one character.");
            Report.Info("Unmatched character in text1: " + unmatchedChars1);
            Report.Info("Unmatched character in text2: " + unmatchedChars2);
        }
      }
        
    private string GetUnmatchedCharacters(string text1, string text2)
    {
        int minLength = Math.Min(text1.Length, text2.Length);
        string unmatched = "";

        // Loop through both texts and find unmatched characters
        for (int i = 0; i < minLength; i++)
        {
            if (text1[i] != text2[i])
            {
                unmatched += text1[i];
            }
        }

        // If one string is longer, add the remaining characters
        if (text1.Length > minLength)
        {
            unmatched += text1.Substring(minLength);
        }

        return unmatched;
    }
        }

    }

