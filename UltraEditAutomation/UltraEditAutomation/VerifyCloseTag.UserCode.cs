///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace UltraEditAutomation
{
    public partial class VerifyCloseTag
    {
        // Declare lineNumber as a class-level variable
        public int lineNumber;

        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ApeearenceofTag()
        {
            try
            {
                // Set the line number here (or it can be set dynamically)
                lineNumber = 2; // You can adjust this line number as needed

                // Locate the editor screen in the repository
                var editorScreen = repo.UltraEdit64Bit.editorScreen;

                if (editorScreen == null)
                {
                    Report.Error("Editor Screen element not found.");
                    return;
                }

                // Retrieve the full text from the 'WindowText' attribute
                string fullText = editorScreen.Element.GetAttributeValueText("WindowText");

                // Split the full text into lines
                var lines = fullText.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);

                // Check if the requested line number is valid
                if (lineNumber <= lines.Length && lineNumber > 0)
                {
                    // Retrieve the specific line
                    string specificLine = lines[lineNumber - 1]; // 0-indexed, so subtract 1
                    Report.Info($"Line {lineNumber}: {specificLine}");

                    // Call the method to verify if <junk></junk> tag is present in the line
                    VerifyTagPresence(specificLine);
                }
                else
                {
                    Report.Error($"Line {lineNumber} does not exist in the retrieved text.");
                }
            }
            catch (Exception ex)
            {
                Report.Error($"An error occurred while retrieving the specific line: {ex.Message}");
            }
        }

        /// <summary>
        /// Verifies if the <junk></junk> tag is present in the specified line.
        /// </summary>
        public void VerifyTagPresence(string specificLine)
        {
            // Define the tag to look for
            string tagToFind = "<junk></junk>";

            // Check if the tag is present in the specific line
            if (specificLine.Contains(tagToFind))
            {
                Report.Success($"The tag {tagToFind} is present in line {lineNumber}.");
            }
            else
            {
                Report.Error($"The tag {tagToFind} is NOT present in line {lineNumber}.");
                Report.Info($"Line content: {specificLine}");
            }
        }
    }
}
