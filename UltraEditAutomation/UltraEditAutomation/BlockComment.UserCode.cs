///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

// Ensure this is included for the Keys class

namespace UltraEditAutomation
{
    public partial class BlockComment
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void SelectBlockLine(RepoItemInfo argument1)
        {
        	
        	// Using the repo reference to get the editor element
            var editorElement = repo.UltraEdit64Bit.editorScreen;

            int firstLine = 10;  // Starting line
            int lastLine = 15;   // Ending line

            int lineNum = firstLine;
            int totalNum = 0;

            try
            {
                // Verify the editor element is found
                if (editorElement == null)
                {
                    Report.Error("Editor element not found. Ensure the XPath is correct or the element is visible.");
                    return;
                }

                // Locate the Go To input field
                Ranorex.Text goToElement = Host.Local.FindSingle<Ranorex.Text>(repo.GoTo.Text1001.GetPath());
                if (goToElement == null)
                {
                    Report.Error("Go To element not found.");
                    return;
                }

                // Type into the Go To input field
                Keyboard.PrepareFocus(goToElement);
                Keyboard.Press("1/1");
                Report.Info("Pressed '1/1' in the Go To text field.");

                // Locate and click the 'Go To' button
                Ranorex.Button goToButton = Host.Local.FindSingle<Ranorex.Button>(repo.GoTo.Goto.GetPath());
                if (goToButton == null)
                {
                    Report.Error("Go To button not found.");
                    return;
                }

                goToButton.Click();
                Report.Info("Clicked on the 'Go To' button.");
                Delay.Milliseconds(500);

                // Navigate to the first line
                for (int i = 0; i < firstLine - 1; i++)
                {
                    Keyboard.PrepareFocus(editorElement);
                    Keyboard.Press(System.Windows.Forms.Keys.Down, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
                    Delay.Milliseconds(100);
                }

                Report.Info($"Moved to line {lineNum}.");

                // Get the text content from the editor
                string windowText = editorElement.Element.GetAttributeValueText("WindowText");
                string[] lines = windowText.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);

                while (lineNum <= lastLine)
                {
                    if (lines.Length >= lineNum)
                    {
                        string currentLine = lines[lineNum - 1];  // Adjust for zero-based index
                        Report.Info($"Current Line Text: '{currentLine}'");

                        string pattern = @"[\w]+|[^\w\s]";  // Regex pattern to match words and special characters
                        var matches = Regex.Matches(currentLine, pattern);
                        totalNum = matches.Count;

                        Report.Info($"Total words in line {lineNum}: {totalNum}");

                        for (int i = 0; i < totalNum; i++)
                        {
                            Keyboard.PrepareFocus(editorElement);
                            Keyboard.Press(System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Shift | System.Windows.Forms.Keys.Right, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
                            Delay.Milliseconds(100);
                        }

                        // If not the last line, move to the next line
                        if (lineNum < lastLine)
                        {
                            Keyboard.PrepareFocus(editorElement);
                            Keyboard.Press(System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Shift | System.Windows.Forms.Keys.Right, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
                            Report.Info($"Completed selection for line {lineNum} and moved to the next line.");
                        }
                        else
                        {
                            Report.Info($"Completed selection for the final line {lineNum}. No further movement.");
                        }

                        lineNum++;
                    }
                    else
                    {
                        Report.Warn("Line number exceeds available lines.");
                        break;
                    }
                }

                Report.Info($"Completed selection up to line {lastLine}.");
            }
            catch (RanorexException ex)
            {
                Report.Error("Ranorex-specific error: " + ex.Message);
            }
            catch (Exception ex)
            {
                Report.Error("An unexpected error occurred: " + ex.Message);
            }
        }
    }
}
