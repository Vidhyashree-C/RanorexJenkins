///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace UltraEditAutomation
{
    public partial class Verify_PasteFullLineContent
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            
        }

        public void VerifyPastedContent(RepoItemInfo argument1)
        {
            try
            {
                
                var editorScreen = repo.UltraEdit64Bit.editorScreen;

                
                if (editorScreen == null)
                {
                    Report.Error("Editor Screen element not found.");
                    return;
                }

                
                string fullText = editorScreen.Element.GetAttributeValueText("WindowText");
                Report.Info("Full Text from WindowText Attribute", fullText);

                
                int lineNumber = 8;

                
                var lines = fullText.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);

                
                if (lineNumber > 0 && lineNumber <= lines.Length)
                {
                    string specificLine = lines[lineNumber - 1];
                    Report.Info($"Line {lineNumber}", specificLine);

                    
                    string lastLine = lines[lines.Length - 2];

                    
                    if (specificLine == lastLine)
                    {
                        Report.Success($"Content of Line {lineNumber} matches the last line.");
                    }
                    else
                    {
                        Report.Error($"Content of Line {lineNumber} does not match the last line.");
                        Report.Info($"Line {lineNumber} Content: {specificLine}");
                        Report.Info($"Last Line Content: {lastLine}");
                    }
                }
                else
                {
                    Report.Error($"Line {lineNumber} does not exist in the retrieved text.");
                }
            }
            catch (Exception ex)
            {
                Report.Error($"An error occurred while verifying pasted content: {ex.Message}");
            }
        }
    }
}
