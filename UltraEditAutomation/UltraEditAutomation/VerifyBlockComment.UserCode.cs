///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace UltraEditAutomation
{
    public partial class VerifyBlockComment
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
        	
        	// Your recording specific initialization code goes here.
        }

        // Renamed method to avoid the naming conflict
        public void VerifyBlockCommentContent(RepoItemInfo argument1)
        {
            int startLine = 10;
            int endLine = 15;

            // XPath to locate the editor element
            var editorElement = repo.UltraEdit64Bit.editorScreen;  // Using the repository reference to get the editor element
            
            try
            {
                // Verify the editor element is found
                if (editorElement == null)
                {
                    Report.Failure("Editor element not found. Check the XPath or if the element is visible at runtime.");
                    throw new RanorexException("Editor element not found.");
                }

                // Retrieve the text content from the editor
                string editorText = editorElement.Element.GetAttributeValueText("WindowText");

                if (string.IsNullOrEmpty(editorText))
                {
                    editorText = editorElement.Element.GetAttributeValueText("AccessibleName");
                }

                if (string.IsNullOrEmpty(editorText))
                {
                    Report.Failure("Unable to retrieve text from the editor using 'WindowText' or 'AccessibleName'.");
                    throw new RanorexException("Editor text could not be retrieved.");
                }

                // Split the text into lines
                string[] lines = editorText.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);

                // Log total number of lines
                Report.Info($"Total number of lines in editor: {lines.Length}");

                // Ensure the specified lines are within the range of available lines
                if (lines.Length < endLine)
                {
                    Report.Failure("The editor does not contain enough lines for the specified range.");
                    throw new RanorexException("Insufficient lines in editor.");
                }

                // Check if the block from line 10 to line 15 is commented
                bool isBlockCommented = true;
                bool insideBlockComment = false; // Flag to track if we're inside a block comment

                for (int i = startLine - 1; i < endLine; i++) // Adjust for 0-based index
                {
                    string line = lines[i].Trim();

                    // Check if we are inside a block comment
                    if (line.StartsWith("/*"))
                    {
                        insideBlockComment = true;
                    }

                    if (line.Contains("*/"))
                    {
                        insideBlockComment = false;
                    }

                    // Check for valid comments (single-line or part of a block)
                    if (!line.StartsWith("//") && !insideBlockComment && !line.StartsWith("/*") && !line.EndsWith("*/"))
                    {
                        isBlockCommented = false;
                        Report.Failure($"The line at line {i + 1} is not commented: '{line}'");
                    }
                }

                if (isBlockCommented)
                {
                    Report.Success($"The block from line {startLine} to line {endLine} is fully commented.");
                }
                else
                {
                    Report.Error($"The block from line {startLine} to line {endLine} is not fully commented. The test case has failed.");
                    throw new RanorexException("The block is not fully commented, test case failed.");
                }
            }
            catch (RanorexException ex)
            {
                Report.Error("Ranorex-specific error: " + ex.Message);
                throw; // Re-throw the exception to indicate failure
            }
            catch (Exception ex)
            {
                Report.Error("An unexpected error occurred: " + ex.Message);
                throw; // Re-throw the exception to indicate failure
            }
        }
    }
}
